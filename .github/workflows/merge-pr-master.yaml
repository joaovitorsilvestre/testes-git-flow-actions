name: "Merge de PR na master"

run-name: 'Criando nova release'

on:
  pull_request:
    types:
      - closed
    branches:
      - master

permissions:
  contents: write

jobs:
  criar-release:
    runs-on:
      - ubuntu-latest

    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Bump version
        id: versao
        run: |          
          pr_title="${{ github.event.pull_request.title }}"
          pr_branch="${{ github.head_ref }}"
          
          echo "Titulo do PR: $pr_title"
          echo "Branch do PR: $pr_branch"
          
          # Se o nome da branch come√ßar com hotfix/ o tipo √© de build
          if [[ "$pr_branch" =~ ^hotfix\/ ]]; then
            TIPO_ATUALIZACAO="rollout"
          elif [[ "$pr_branch" =~ ^release\/v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TIPO_ATUALIZACAO="loja"
          else
            echo "Falha nos bloquios de PR, pois para mergear na master s√≥ poderia se a branch come√ßar com 'hotfix/' ou se de release no formato 'release/v0.0.0.0'"
            exit 1
          fi

          new_version="${pr_title:10}"
          
          # valida que a vers√£o √© v√°lida
          if ! [[ "$new_version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Invalid version: $new_version"
              exit 1
          fi
          
          echo "Nova versao: $new_version"
          echo "NOVA_VERSAO=$new_version" >> $GITHUB_OUTPUT
          echo "TIPO_ATUALIZACAO=$TIPO_ATUALIZACAO" >> $GITHUB_OUTPUT

      - name: Criar PR para atualizar a branch develop
        run: |
          gh pr create -B develop -H master \
            --title "[release] Atualizar branch develop p√≥s release ${{ steps.versao.outputs.NOVA_VERSAO }}" \
            --body 'Criada no github actions' || true
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_USER_TOKEN }}

      - name: Criar tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ steps.versao.outputs.NOVA_VERSAO }} -m "Release ${{ steps.versao.outputs.NOVA_VERSAO }}"
          git push origin ${{ steps.versao.outputs.NOVA_VERSAO }}

      - name: Pegar a √∫ltima tag
        id: ultima_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      - name: Gera changelog
        id: changelog-ci
        env:
          GH_TOKEN: ${{ secrets.DEV_USER_TOKEN }}
        run: |
          TAG_INICIAL=${{ steps.ultima_tag.outputs.tag }}
          TAG_FINAL=${{ steps.versao.outputs.NOVA_VERSAO }}
          
          chmod +x .github/scripts/pegar_prs.sh
          .github/scripts/pegar_prs.sh develop $TAG_INICIAL $TAG_FINAL "\[feat|major\]" features_develop.txt
          .github/scripts/pegar_prs.sh develop $TAG_INICIAL $TAG_FINAL "\[fix\]" fixes_develop.txt
          .github/scripts/pegar_prs.sh master $TAG_INICIAL $TAG_FINAL "\[fix\]" hotfixes.txt
          
          CHANGELOG="## CHANGELOG\n\n"
          if [[ -s features_develop.txt ]]; then
            CHANGELOG+="### Features üöÄ\n\n"
            CHANGELOG+=$(cat features_develop.txt)
            CHANGELOG+="\n\n"
          fi
          
          if [[ -s fixes_develop.txt ]]; then
              CHANGELOG+="### Fixes üêõ\n\n"
              CHANGELOG+=$(cat fixes_develop.txt)
              CHANGELOG+="\n\n"
          fi
        
          if [[ -s hotfixes.txt ]]; then
              CHANGELOG+="### Hotfixes üßØ\n\n"
              CHANGELOG+=$(cat hotfixes.txt)
              CHANGELOG+="\n\n"
          fi
          
          echo 'var<<EOF' >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ steps.versao.outputs.NOVA_VERSAO }}
          tag: ${{ steps.versao.outputs.NOVA_VERSAO }}
          body: ${{ steps.changelog-ci.outputs.changelog }}
          token: ${{ secrets.DEV_USER_TOKEN }}
